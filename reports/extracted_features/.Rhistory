# load packages
library(sjPlot)
install.packages("sjPlot")
install.packages("sjmisc")
install.packages("sjlabelled")
# load packages
library(sjPlot)
library(sjmisc)
library(sjlabelled)
# load sample data set.
data(efc)
set_theme(theme = "forest",
geom.label.size = 3,
axis.textsize = .9,
axis.title.size = .9)
# fit model
library(lme4)
fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
# prepare group variable
efc$grp = as.factor(efc$e15relat)
levels(x = efc$grp) <- get_labels(efc$e15relat)
# data frame for fitted model
mydf <- data.frame(neg_c_7 = efc$neg_c_7,
sex = to_factor(efc$c161sex),
c12hour = efc$c12hour,
barthel = efc$barthtot,
grp = efc$grp)
# fit 2nd model
fit2 <- lmer(neg_c_7 ~ sex + c12hour + barthel + (1 | grp), data = mydf)
sjp.lmer(fit, y.offset = .4)
# load packages
library(sjPlot)
library(sjmisc)
library(sjlabelled)
# load sample data set.
data(efc)
set_theme(theme = "forest",
geom.label.size = 3,
axis.textsize = .9,
axis.title.size = .9)
# fit model
library(lme4)
fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
# prepare group variable
efc$grp = as.factor(efc$e15relat)
levels(x = efc$grp) <- get_labels(efc$e15relat)
# data frame for fitted model
mydf <- data.frame(neg_c_7 = efc$neg_c_7,
sex = to_factor(efc$c161sex),
c12hour = efc$c12hour,
barthel = efc$barthtot,
grp = efc$grp)
# fit 2nd model
fit2 <- lmer(neg_c_7 ~ sex + c12hour + barthel + (1 | grp), data = mydf)
sjp.lmer(fit, y.offset = .4)
install.packages("sjPlot")
# load packages
library(sjPlot)
library(sjmisc)
library(sjlabelled)
# load sample data set.
data(efc)
set_theme(theme = "forest",
geom.label.size = 3,
axis.textsize = .9,
axis.title.size = .9)
# fit model
library(lme4)
fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
# prepare group variable
efc$grp = as.factor(efc$e15relat)
levels(x = efc$grp) <- get_labels(efc$e15relat)
# data frame for fitted model
mydf <- data.frame(neg_c_7 = efc$neg_c_7,
sex = to_factor(efc$c161sex),
c12hour = efc$c12hour,
barthel = efc$barthtot,
grp = efc$grp)
# fit 2nd model
fit2 <- lmer(neg_c_7 ~ sex + c12hour + barthel + (1 | grp), data = mydf)
sjp.lmer(fit, y.offset = .4)
# load packages
library(sjPlot)
library(sjmisc)
library(sjlabelled)
# load sample data set.
data(efc)
set_theme(theme = "forest",
geom.label.size = 3,
axis.textsize = .9,
axis.title.size = .9)
# fit model
library(lme4)
fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
# prepare group variable
efc$grp = as.factor(efc$e15relat)
levels(x = efc$grp) <- get_labels(efc$e15relat)
# data frame for fitted model
mydf <- data.frame(neg_c_7 = efc$neg_c_7,
sex = to_factor(efc$c161sex),
c12hour = efc$c12hour,
barthel = efc$barthtot,
grp = efc$grp)
# fit 2nd model
fit2 <- lmer(neg_c_7 ~ sex + c12hour + barthel + (1 | grp), data = mydf)
sjp.lmer(fit, y.offset = .4)
library(lme4)
fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
# simple plot
sjp.lmer(fit)
# plot fixed effects
sjp.lmer(fit, type = "fe")
library(lme4)
library(tidyverse)
library(sjPlot)
library(faux)
theme_set(theme_sjplot())
data <- add_random(participant = 5) %>%
add_random(item = 3, .nested_in = "participant") %>%
add_random(band = 5, .nested_in = "participant") %>%
add_random(time = 10, .nested_in = "participant")
data['dependent_var'] <- rnorm(96000, mean = 0, sd = 1)
data['independent_var'] <- rnorm(96000, mean = 0, sd = 1)
data['covariate_1'] <- rnorm(96000, mean = 0, sd = 1)
data['covariate_2'] <- rnorm(96000, mean = 0, sd = 1)
data <- add_random(participant = 5) %>%
add_random(item = 3, .nested_in = "participant") %>%
add_random(band = 5, .nested_in = "participant") %>%
add_random(time = 10, .nested_in = "participant")
data['dependent_var'] <- rnorm(len(data), mean = 0, sd = 1)
data['independent_var'] <- rnorm(len(data), mean = 0, sd = 1)
data['covariate_1'] <- rnorm(len(data), mean = 0, sd = 1)
len(data)
data <- add_random(participant = 5) %>%
add_random(item = 3, .nested_in = "participant") %>%
add_random(band = 5, .nested_in = "participant") %>%
add_random(time = 10, .nested_in = "participant")
data['dependent_var'] <- rnorm(length(data), mean = 0, sd = 1)
data <- add_random(participant = 5) %>%
add_random(item = 3, .nested_in = "participant") %>%
add_random(band = 5, .nested_in = "participant") %>%
add_random(time = 10, .nested_in = "participant")
data['dependent_var'] <- rnorm(length(data), mean = 0, sd = 1)
length(data)
count(data)
data <- add_random(participant = 5) %>%
add_random(item = 3, .nested_in = "participant") %>%
add_random(band = 5, .nested_in = "participant") %>%
add_random(time = 10, .nested_in = "participant")
data['dependent_var'] <- rnorm(count(data), mean = 0, sd = 1)
count(data)
ddply(data)
library(lme4)
library(tidyverse)
library(sjPlot)
library(faux)
theme_set(theme_sjplot())
data <- add_random(participant = 5) %>%
add_random(item = 3, .nested_in = "participant") %>%
add_random(band = 5, .nested_in = "participant") %>%
add_random(time = 10, .nested_in = "participant")
data['dependent_var'] <- rnorm(750, mean = 0, sd = 1)
data['independent_var'] <- rnorm(750, mean = 0, sd = 1)
data['covariate_1'] <- rnorm(750, mean = 0, sd = 1)
data['covariate_2'] <- rnorm(750, mean = 0, sd = 1)
View(data)
full.model = lmer(dependent_var ~ independent_var + covariate_1 + covariate_2 +
(1+independent_var|participant) +
(1+independent_var|item) +
(1+independent_var|band) +
(1+independent_var|time),
REML=FALSE,
data = data,
control = lmerControl(calc.derivs = FALSE))
p <- plot_model(full.model, type = "slope", axis.lim = c(1, 10))
p
p <- plot_model(full.model,
type = "slope",
axis.lim = c(1, 10),
group.terms = c('b01', 'b02', 'b03', 'b04', 'b05'))
p
plot_model(full.model,
type = "slope",
axis.lim = c(0, 1),
group.terms = c('b01', 'b02', 'b03', 'b04', 'b05'))
plot_model(full.model,
type = "slope",
axis.lim = c(0, 1),
terms = 'band')
data['dependent_var'] <- rnorm(750, mean = 0, sd = 1)
data['independent_var'] <- rnorm(750, mean = 0, sd = 5)
data['covariate_1'] <- rnorm(750, mean = 0, sd = 5)
data['covariate_2'] <- rnorm(750, mean = 0, sd = 5)
full.model = lmer(dependent_var ~ independent_var + covariate_1 + covariate_2 +
(1+independent_var|participant) +
(1+independent_var|item) +
(1+independent_var|band) +
(1+independent_var|time),
REML=FALSE,
data = data,
control = lmerControl(calc.derivs = FALSE))
plot_model(full.model,
type = "slope",
axis.lim = c(0, 1),
terms = 'band')
# vector of colors
colors <- c("Red", "Blue", "Gold", "Black", "Pink", "Green")
# declare a list to hold distribution values
poisson.dist < - list()
a < - c(1, 2, 3, 4, 5, 6) # A vector for values of u
for (i in 1:6) {
poisson.dist[[i]] <- c(dpois(0:20, i)) # Store distribution vector for each corresponding value of u
}
a < - c(1, 2, 3, 4, 5, 6) # A vector for values of u
for (i in 1:6) {
poisson.dist[[i]] <- c(dpois(0:20, i)) # Store distribution vector for each corresponding value of u
}
# plot each vector in the list using the colors vectors to represent each value for u
plot(unlist(poisson.dist[1]), type = "o", xlab="y", ylab = "P(y)",
col = colors[i])
for (i in 1:6) {
lines(unlist(poisson.dist[i]), type = "o", col = colors[i])
}
# Adds legend to the graph plotted
legend("topright", legend = a, inset = 0.08, cex = 1.0, fill = colors, title = "Values of u")
install.packages("datasets.load")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
library(datasets) # include library datasets after installation
data < - warpbreaks
data < - warpbreaks
library(datasets) # include library datasets after installation
data < - warpbreaks
library(datasetsload) # include library datasets after installation
library(datasets.load) # include library datasets after installation
data < - warpbreaks
library(datasets) # include library datasets after installation
data < - warpbreaks
data < - data(warpbreaks)
data < - data.frame(warpbreaks)
View(warpbreaks)
columns < - names(data) # Extract column names from dataframe
columns < - names(data) # Extract column names from dataframe
columns <- names(data) # Extract column names from dataframe
names(data)
View(warpbreaks)
library(datasets) # include library datasets after installation
data <- data.frame(warpbreaks)
columns <- names(data) # Extract column names from dataframe
names(data)
ls.str(warpbreaks)
hist(data$breaks)
mean(data$breaks) # calculate mean
var(data$breaks) # calculate variance
poisson.model < - glm(breaks ~ wool + tension, data, family = poisson(link = "log"))
summary(poisson.model)
poisson.model <- glm(breaks ~ wool + tension, data, family = poisson(link = "log"))
summary(poisson.model)
poisson.model2 < - glm(breaks ~ wool + tension, data = data, family = quasipoisson(link = "log"))
summary(poisson.model2)
poisson.model2 < - glm(breaks ~ wool + tension, data = data, family = quasipoisson(link = "log"))
poisson.model2 <- glm(breaks ~ wool + tension, data = data, family = quasipoisson(link = "log"))
summary(poisson.model2)
install.packages("jtools")
install.packages("broom")
install.packages("broom")
install.packages("ggstance")
library(jtools)
# plot regression coefficients for poisson.model2
plot_summs(poisson.model2, scale = TRUE, exp = TRUE)
library(jtools)
# plot regression coefficients for poisson.model2
plot_summs(poisson.model2, scale = TRUE, exp = TRUE)
library(broom)
# plot regression coefficients for poisson.model2
plot_summs(poisson.model2, scale = TRUE, exp = TRUE)
install.packages("broom.mixed)
data <- data.frame(warpbreaks)
columns <- names(data) # Extract column names from dataframe
names(data)
ls.str(warpbreaks)
hist(data$breaks)
mean(data$breaks) # calculate mean
var(data$breaks) # calculate variance
# Remember, with a Poisson Distribution model weâ€™re trying to figure out how some
# predictor variables affect a response variable. Here, breaks is the response
# variable and wool and tension are predictor variables.
poisson.model <- glm(breaks ~ wool + tension, data, family = poisson(link = "log"))
summary(poisson.model)
poisson.model2 <- glm(breaks ~ wool + tension, data = data, family = quasipoisson(link = "log"))
summary(poisson.model2)
# plot regression coefficients for poisson.model2
plot_summs(poisson.model2, scale = TRUE, exp = TRUE)
install.packages("broom.mixed")
library(broom.mixed)
data <- data.frame(warpbreaks)
columns <- names(data) # Extract column names from dataframe
names(data)
ls.str(warpbreaks)
hist(data$breaks)
mean(data$breaks) # calculate mean
var(data$breaks) # calculate variance
poisson.model <- glm(breaks ~ wool + tension, data, family = poisson(link = "log"))
summary(poisson.model)
poisson.model2 <- glm(breaks ~ wool + tension, data = data, family = quasipoisson(link = "log"))
summary(poisson.model2)
# plot regression coefficients for poisson.model2
plot_summs(poisson.model2, scale = TRUE, exp = TRUE)
# plot regression coefficients for poisson.model2 and poisson.model
plot_summs(poisson.model, poisson.model2, scale = TRUE, exp = TRUE)
cat_plot(poisson.model2, pred = wool, modx = tension)
library(datasets) # include library datasets after installation
library(jtools)
library(jtools)
library(broom)
library(broom.mixed)
data <- data.frame(warpbreaks)
columns <- names(data) # Extract column names from dataframe
names(data)
ls.str(warpbreaks)
hist(data$breaks)
mean(data$breaks) # calculate mean
var(data$breaks) # calculate variance
poisson.model <- glm(breaks ~ wool + tension, data, family = poisson(link = "log"))
summary(poisson.model)
poisson.model2 <- glm(breaks ~ wool + tension, data = data, family = quasipoisson(link = "log"))
summary(poisson.model2)
# plot regression coefficients for poisson.model2
plot_summs(poisson.model2, scale = TRUE, exp = TRUE)
# plot regression coefficients for poisson.model2 and poisson.model
plot_summs(poisson.model, poisson.model2, scale = TRUE, exp = TRUE)
cat_plot(poisson.model2, pred = wool, modx = tension)
install.packages("interactions")
library(interactions)
cat_plot(poisson.model2, pred = wool, modx = tension)
cat_plot(poisson.model2, pred = tension, modx = wool)
cat_plot(poisson.model2, pred = tension, modx = wool, geom = "line")
cat_plot(poisson.model2, pred = tension, modx = wool, geom = "line", plot.points = TRUE)
library(lme4)
library(tidyverse)
setwd("~/Documents/MATLAB/affect_detection/features")
# Create list of files
files_list <- list.files()
# Concatenate all files
all_files <- list()
for (file in 1:length(files_list)) {
file_data <- read.csv(files_list[file])
all_files <- bind_rows(all_files, file_data)
}
# Define variables
dimensions <- list('negativity_rating', 'positivity_rating', 'net_predisposition_rating')
features <- list('frontal_asymmetry', 'parietal_mean')
bands <- list('delta', 'theta', 'alpha', 'beta', 'gamma')
all_results <- list()
for (d in dimensions) {
for (f in features) {
for (b in bands) {
# Subset data from current power band
band_data <- all_files %>%
filter(band == b)
# Build full model
dimension.model = lmer(get(d) ~ get(f) + gender +
(1|participant) +
(get(f)-1|participant) +
(1|video_id) +
(get(f)-1|video_id) +
(1|second) +
(get(f)-1|second),
REML=FALSE,
data = band_data,
control = lmerControl(calc.derivs = FALSE))
# Build null model
dimension.null = lmer(get(d) ~ gender +
(1|participant) +
(get(f)-1|participant) +
(1|video_id) +
(get(f)-1|video_id) +
(1|second) +
(get(f)-1|second),
REML=FALSE,
data = band_data,
control = lmerControl(calc.derivs = FALSE))
# Obtain likelihood ratio for negativity dimension
result <- anova(dimension.null, dimension.model)
all_results[[sprintf('%s_%s_%s', d, b, f)]] <- result
}
}
}
print(all_results)
capture.output(all_results, file = "~/Documents/MATLAB/affect_detection/results/lmm_results.txt")
