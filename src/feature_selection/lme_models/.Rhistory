# fit model
library(lme4)
fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
# prepare group variable
efc$grp = as.factor(efc$e15relat)
levels(x = efc$grp) <- get_labels(efc$e15relat)
# data frame for fitted model
mydf <- data.frame(neg_c_7 = efc$neg_c_7,
sex = to_factor(efc$c161sex),
c12hour = efc$c12hour,
barthel = efc$barthtot,
grp = efc$grp)
# fit 2nd model
fit2 <- lmer(neg_c_7 ~ sex + c12hour + barthel + (1 | grp), data = mydf)
sjp.lmer(fit, y.offset = .4)
install.packages("sjPlot")
# load packages
library(sjPlot)
library(sjmisc)
library(sjlabelled)
# load sample data set.
data(efc)
set_theme(theme = "forest",
geom.label.size = 3,
axis.textsize = .9,
axis.title.size = .9)
# fit model
library(lme4)
fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
# prepare group variable
efc$grp = as.factor(efc$e15relat)
levels(x = efc$grp) <- get_labels(efc$e15relat)
# data frame for fitted model
mydf <- data.frame(neg_c_7 = efc$neg_c_7,
sex = to_factor(efc$c161sex),
c12hour = efc$c12hour,
barthel = efc$barthtot,
grp = efc$grp)
# fit 2nd model
fit2 <- lmer(neg_c_7 ~ sex + c12hour + barthel + (1 | grp), data = mydf)
sjp.lmer(fit, y.offset = .4)
# load packages
library(sjPlot)
library(sjmisc)
library(sjlabelled)
# load sample data set.
data(efc)
set_theme(theme = "forest",
geom.label.size = 3,
axis.textsize = .9,
axis.title.size = .9)
# fit model
library(lme4)
fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
# prepare group variable
efc$grp = as.factor(efc$e15relat)
levels(x = efc$grp) <- get_labels(efc$e15relat)
# data frame for fitted model
mydf <- data.frame(neg_c_7 = efc$neg_c_7,
sex = to_factor(efc$c161sex),
c12hour = efc$c12hour,
barthel = efc$barthtot,
grp = efc$grp)
# fit 2nd model
fit2 <- lmer(neg_c_7 ~ sex + c12hour + barthel + (1 | grp), data = mydf)
sjp.lmer(fit, y.offset = .4)
library(lme4)
fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
# simple plot
sjp.lmer(fit)
# plot fixed effects
sjp.lmer(fit, type = "fe")
library(lme4)
library(tidyverse)
library(sjPlot)
library(faux)
theme_set(theme_sjplot())
data <- add_random(participant = 5) %>%
add_random(item = 3, .nested_in = "participant") %>%
add_random(band = 5, .nested_in = "participant") %>%
add_random(time = 10, .nested_in = "participant")
data['dependent_var'] <- rnorm(96000, mean = 0, sd = 1)
data['independent_var'] <- rnorm(96000, mean = 0, sd = 1)
data['covariate_1'] <- rnorm(96000, mean = 0, sd = 1)
data['covariate_2'] <- rnorm(96000, mean = 0, sd = 1)
data <- add_random(participant = 5) %>%
add_random(item = 3, .nested_in = "participant") %>%
add_random(band = 5, .nested_in = "participant") %>%
add_random(time = 10, .nested_in = "participant")
data['dependent_var'] <- rnorm(len(data), mean = 0, sd = 1)
data['independent_var'] <- rnorm(len(data), mean = 0, sd = 1)
data['covariate_1'] <- rnorm(len(data), mean = 0, sd = 1)
len(data)
data <- add_random(participant = 5) %>%
add_random(item = 3, .nested_in = "participant") %>%
add_random(band = 5, .nested_in = "participant") %>%
add_random(time = 10, .nested_in = "participant")
data['dependent_var'] <- rnorm(length(data), mean = 0, sd = 1)
data <- add_random(participant = 5) %>%
add_random(item = 3, .nested_in = "participant") %>%
add_random(band = 5, .nested_in = "participant") %>%
add_random(time = 10, .nested_in = "participant")
data['dependent_var'] <- rnorm(length(data), mean = 0, sd = 1)
length(data)
count(data)
data <- add_random(participant = 5) %>%
add_random(item = 3, .nested_in = "participant") %>%
add_random(band = 5, .nested_in = "participant") %>%
add_random(time = 10, .nested_in = "participant")
data['dependent_var'] <- rnorm(count(data), mean = 0, sd = 1)
count(data)
ddply(data)
library(lme4)
library(tidyverse)
library(sjPlot)
library(faux)
theme_set(theme_sjplot())
data <- add_random(participant = 5) %>%
add_random(item = 3, .nested_in = "participant") %>%
add_random(band = 5, .nested_in = "participant") %>%
add_random(time = 10, .nested_in = "participant")
data['dependent_var'] <- rnorm(750, mean = 0, sd = 1)
data['independent_var'] <- rnorm(750, mean = 0, sd = 1)
data['covariate_1'] <- rnorm(750, mean = 0, sd = 1)
data['covariate_2'] <- rnorm(750, mean = 0, sd = 1)
View(data)
full.model = lmer(dependent_var ~ independent_var + covariate_1 + covariate_2 +
(1+independent_var|participant) +
(1+independent_var|item) +
(1+independent_var|band) +
(1+independent_var|time),
REML=FALSE,
data = data,
control = lmerControl(calc.derivs = FALSE))
p <- plot_model(full.model, type = "slope", axis.lim = c(1, 10))
p
p <- plot_model(full.model,
type = "slope",
axis.lim = c(1, 10),
group.terms = c('b01', 'b02', 'b03', 'b04', 'b05'))
p
plot_model(full.model,
type = "slope",
axis.lim = c(0, 1),
group.terms = c('b01', 'b02', 'b03', 'b04', 'b05'))
plot_model(full.model,
type = "slope",
axis.lim = c(0, 1),
terms = 'band')
data['dependent_var'] <- rnorm(750, mean = 0, sd = 1)
data['independent_var'] <- rnorm(750, mean = 0, sd = 5)
data['covariate_1'] <- rnorm(750, mean = 0, sd = 5)
data['covariate_2'] <- rnorm(750, mean = 0, sd = 5)
full.model = lmer(dependent_var ~ independent_var + covariate_1 + covariate_2 +
(1+independent_var|participant) +
(1+independent_var|item) +
(1+independent_var|band) +
(1+independent_var|time),
REML=FALSE,
data = data,
control = lmerControl(calc.derivs = FALSE))
plot_model(full.model,
type = "slope",
axis.lim = c(0, 1),
terms = 'band')
# vector of colors
colors <- c("Red", "Blue", "Gold", "Black", "Pink", "Green")
# declare a list to hold distribution values
poisson.dist < - list()
a < - c(1, 2, 3, 4, 5, 6) # A vector for values of u
for (i in 1:6) {
poisson.dist[[i]] <- c(dpois(0:20, i)) # Store distribution vector for each corresponding value of u
}
a < - c(1, 2, 3, 4, 5, 6) # A vector for values of u
for (i in 1:6) {
poisson.dist[[i]] <- c(dpois(0:20, i)) # Store distribution vector for each corresponding value of u
}
# plot each vector in the list using the colors vectors to represent each value for u
plot(unlist(poisson.dist[1]), type = "o", xlab="y", ylab = "P(y)",
col = colors[i])
for (i in 1:6) {
lines(unlist(poisson.dist[i]), type = "o", col = colors[i])
}
# Adds legend to the graph plotted
legend("topright", legend = a, inset = 0.08, cex = 1.0, fill = colors, title = "Values of u")
install.packages("datasets.load")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
library(datasets) # include library datasets after installation
data < - warpbreaks
data < - warpbreaks
library(datasets) # include library datasets after installation
data < - warpbreaks
library(datasetsload) # include library datasets after installation
library(datasets.load) # include library datasets after installation
data < - warpbreaks
library(datasets) # include library datasets after installation
data < - warpbreaks
data < - data(warpbreaks)
data < - data.frame(warpbreaks)
View(warpbreaks)
columns < - names(data) # Extract column names from dataframe
columns < - names(data) # Extract column names from dataframe
columns <- names(data) # Extract column names from dataframe
names(data)
View(warpbreaks)
library(datasets) # include library datasets after installation
data <- data.frame(warpbreaks)
columns <- names(data) # Extract column names from dataframe
names(data)
ls.str(warpbreaks)
hist(data$breaks)
mean(data$breaks) # calculate mean
var(data$breaks) # calculate variance
poisson.model < - glm(breaks ~ wool + tension, data, family = poisson(link = "log"))
summary(poisson.model)
poisson.model <- glm(breaks ~ wool + tension, data, family = poisson(link = "log"))
summary(poisson.model)
poisson.model2 < - glm(breaks ~ wool + tension, data = data, family = quasipoisson(link = "log"))
summary(poisson.model2)
poisson.model2 < - glm(breaks ~ wool + tension, data = data, family = quasipoisson(link = "log"))
poisson.model2 <- glm(breaks ~ wool + tension, data = data, family = quasipoisson(link = "log"))
summary(poisson.model2)
install.packages("jtools")
install.packages("broom")
install.packages("broom")
install.packages("ggstance")
library(jtools)
# plot regression coefficients for poisson.model2
plot_summs(poisson.model2, scale = TRUE, exp = TRUE)
library(jtools)
# plot regression coefficients for poisson.model2
plot_summs(poisson.model2, scale = TRUE, exp = TRUE)
library(broom)
# plot regression coefficients for poisson.model2
plot_summs(poisson.model2, scale = TRUE, exp = TRUE)
install.packages("broom.mixed)
data <- data.frame(warpbreaks)
columns <- names(data) # Extract column names from dataframe
names(data)
ls.str(warpbreaks)
hist(data$breaks)
mean(data$breaks) # calculate mean
var(data$breaks) # calculate variance
# Remember, with a Poisson Distribution model weâ€™re trying to figure out how some
# predictor variables affect a response variable. Here, breaks is the response
# variable and wool and tension are predictor variables.
poisson.model <- glm(breaks ~ wool + tension, data, family = poisson(link = "log"))
summary(poisson.model)
poisson.model2 <- glm(breaks ~ wool + tension, data = data, family = quasipoisson(link = "log"))
summary(poisson.model2)
# plot regression coefficients for poisson.model2
plot_summs(poisson.model2, scale = TRUE, exp = TRUE)
install.packages("broom.mixed")
library(broom.mixed)
data <- data.frame(warpbreaks)
columns <- names(data) # Extract column names from dataframe
names(data)
ls.str(warpbreaks)
hist(data$breaks)
mean(data$breaks) # calculate mean
var(data$breaks) # calculate variance
poisson.model <- glm(breaks ~ wool + tension, data, family = poisson(link = "log"))
summary(poisson.model)
poisson.model2 <- glm(breaks ~ wool + tension, data = data, family = quasipoisson(link = "log"))
summary(poisson.model2)
# plot regression coefficients for poisson.model2
plot_summs(poisson.model2, scale = TRUE, exp = TRUE)
# plot regression coefficients for poisson.model2 and poisson.model
plot_summs(poisson.model, poisson.model2, scale = TRUE, exp = TRUE)
cat_plot(poisson.model2, pred = wool, modx = tension)
library(datasets) # include library datasets after installation
library(jtools)
library(jtools)
library(broom)
library(broom.mixed)
data <- data.frame(warpbreaks)
columns <- names(data) # Extract column names from dataframe
names(data)
ls.str(warpbreaks)
hist(data$breaks)
mean(data$breaks) # calculate mean
var(data$breaks) # calculate variance
poisson.model <- glm(breaks ~ wool + tension, data, family = poisson(link = "log"))
summary(poisson.model)
poisson.model2 <- glm(breaks ~ wool + tension, data = data, family = quasipoisson(link = "log"))
summary(poisson.model2)
# plot regression coefficients for poisson.model2
plot_summs(poisson.model2, scale = TRUE, exp = TRUE)
# plot regression coefficients for poisson.model2 and poisson.model
plot_summs(poisson.model, poisson.model2, scale = TRUE, exp = TRUE)
cat_plot(poisson.model2, pred = wool, modx = tension)
install.packages("interactions")
library(interactions)
cat_plot(poisson.model2, pred = wool, modx = tension)
cat_plot(poisson.model2, pred = tension, modx = wool)
cat_plot(poisson.model2, pred = tension, modx = wool, geom = "line")
cat_plot(poisson.model2, pred = tension, modx = wool, geom = "line", plot.points = TRUE)
library(lme4)
library(tidyverse)
wd <- getwd()
setwd("..")
parent <- getwd()
setwd(wd)
wd <- getwd()
dirname(file_path)
system.getCurrentDirectory()
install.packages("here")
library(lme4)
library(tidyverse)
library(here)
dr_here()
here()
i_am()
here()
library(lme4)
library(tidyverse)
library(here)
here()
install.packages("rstudioapi")
library(rstudioapi)
current_working_dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
strsplit(current_working_dir, split = "/")
current_working_dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
route <- strsplit(current_working_dir, split = "/")
route[0]
current_working_dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
route <- strsplit(current_working_dir, split = "/")
route[1]
route[2]
as.list(unlist(strsplit(current_working_dir, '/')))
current_working_dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
route <- as.list(unlist(strsplit(current_working_dir, '/')))
route[1]
route[2]
library(reticulate)
py$x
os <- import("settings")
library(reticulate)
os <- import("os")
yes
library(reticulate)
os <- import("os")
participants <- import_from_path("settings").import("participants_codes")
ps <- import_from_path("settings").import("participants_codes")
library(reticulate)
ps <- import_from_path("settings").import("participants_codes")
ps <- import_from_path("participant_codes", path = "src.settings")
ps <- import_from_path("participant_codes", path = "settings")
library(reticulate)
ps <- import_from_path("participant_codes", path = "settings")
setwd("~/Documents/MATLAB/affect_detection/src")
library(reticulate)
ps <- import_from_path("participant_codes", path = "settings.py")
library(reticulate)
ps <- import_from_path("participants_codes", path = "settings.py")
reticulate::source_python('testR.py')
reticulate::source_python('settings.py')
library(reticulate)
reticulate::source_python('settings.py')
# Import settings
reticulate::source_python('settings.py')
# Install packages if required
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(lme4)){install.packages("lme4")}
if(!require(arrow)){install.packages("arrow")}
if(!require(arrow)){install.packages("reticulate")}
# Load packages
library(tidyverse)
library(dplyr)
library(lme4)
library(arrow)
library(reticulate)
# Import settings
reticulate::source_python('settings.py')
working_directory <- paste(d, 'reports/extracted_features/lme/base/', sep="")
setwd(working_directory)
setwd(working_directory)
working_directory <- paste(d, '/reports/extracted_features/lme/base/', sep="")
setwd(working_directory)
setwd(working_directory)
# Create list of files
participants_list <- list.files()
# Create list of files
# participants_list <- list.files()
len_participants_codes <- seq(1, length(participants_codes))
# Install packages if required
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(lme4)){install.packages("lme4")}
if(!require(arrow)){install.packages("arrow")}
if(!require(arrow)){install.packages("reticulate")}
# Load packages
library(tidyverse)
library(dplyr)
library(lme4)
library(arrow)
library(reticulate)
# Import settings
reticulate::source_python('settings.py')
# Import settings
setwd(getSrcDirectory()[1])
# Import settings
getSrcDirectory()
# Import settings
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
reticulate::source_python('settings.py')
# Import settings
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Import settings
getActiveDocumentContext()
# Import settings
this.dir <- dirname(parent.frame(2)$ofile)
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
setwd(dirname(current_path ))
reticulate::source_python('settings.py')
reticulate::source_python('../../settings.py')
print(current_path)
# Install packages if required
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(lme4)){install.packages("lme4")}
if(!require(arrow)){install.packages("arrow")}
if(!require(arrow)){install.packages("reticulate")}
if(!require(arrow)){install.packages("rstudioapi")}
# Load packages
library(tidyverse)
library(dplyr)
library(lme4)
library(arrow)
library(reticulate)
library(rstudioapi)
# Import settings
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
reticulate::source_python('../../settings.py')
# Define working directory
working_directory <- paste(d, '/reports/extracted_features/lme/base/', sep="")
setwd(working_directory)
print(working_directory)
# Define working directory
working_directory <- paste(d, '/reports/extracted_features/lme/base/', sep="")
setwd(working_directory)
setwd(dirname(current_path ))
reticulate::source_python('../../settings.py')
# Define working directory
working_directory <- paste(d, '/reports/extracted_features/lme/base/', sep="")
setwd(working_directory)
# Load packages
library(tidyverse)
library(dplyr)
library(lme4)
library(arrow)
library(reticulate)
library(rstudioapi)
# Import settings
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
# Define working directory
working_directory <- paste(d, '/reports/extracted_features/lme/base/', sep="")
setwd(working_directory)
# Install packages if required
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(lme4)){install.packages("lme4")}
if(!require(arrow)){install.packages("arrow")}
if(!require(arrow)){install.packages("reticulate")}
if(!require(arrow)){install.packages("rstudioapi")}
# Load packages
library(tidyverse)
library(dplyr)
library(lme4)
library(arrow)
library(reticulate)
library(rstudioapi)
# Import settings
# current_path = rstudioapi::getActiveDocumentContext()$path
# setwd(dirname(current_path ))
reticulate::source_python('../../settings.py')
# Define working directory
working_directory <- paste(d, '/reports/extracted_features/lme/base/', sep="")
setwd(working_directory)
print(working_directory)
# Load packages
library(tidyverse)
library(dplyr)
library(lme4)
library(arrow)
library(reticulate)
library(rstudioapi)
# Import settings
# current_path = rstudioapi::getActiveDocumentContext()$path
# setwd(dirname(current_path ))
reticulate::source_python('../../settings.py')
# Define working directory
working_directory <- paste(d, '/reports/extracted_features/lme/base/', sep="")
# Define working directory
working_directory <- paste(d, '/reports/extracted_features/lme/base/', sep="")
setwd(working_directory)
print(working_directory)
library(reticulate)
reticulate::repl_python()
reticulate::source_python('src/settings.py')
source_python('test_r.py')
source_python('../../test_r.py')
source_python('../../test_r.py', 's')
source_python('../../test_r.py')
